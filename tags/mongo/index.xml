<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mongo on Vikas Blogs</title>
    <link>https://vikasontech.github.io/tags/mongo/</link>
    <description>Recent content in mongo on Vikas Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 08 May 2020 21:09:20 +0700</lastBuildDate>
    
	<atom:link href="https://vikasontech.github.io/tags/mongo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Reactive Transaction With Mongo</title>
      <link>https://vikasontech.github.io/post/spring-reactive-transaction-with-mongo/</link>
      <pubDate>Fri, 08 May 2020 21:09:20 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/spring-reactive-transaction-with-mongo/</guid>
      <description>Introduction
In this blog post we will use ReactiveMongoTransactionManager class to manage the transaction. Along with that we shall use the mongo db.
Version
 Kotlin: 1.3.71 Spring-boot: 2.2.6.RELEASEA Java: 11 mongo db: 4.2.0-rc2-bionic  Dependencies
You can use Spring Initializer to initialize the project you need following dependencies -
 Spring Reactive Web Spring Data Reactive MongoDB  Create docker-compose.yml file
I use docker for running the mongo db the docker compose file looks like this -</description>
    </item>
    
    <item>
      <title>Spring&#43;kotlin&#43;mongo&#43;testcontainer</title>
      <link>https://vikasontech.github.io/post/spring&#43;kotlin&#43;mongo&#43;testcontainer/</link>
      <pubDate>Sat, 18 Jan 2020 07:15:08 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/spring&#43;kotlin&#43;mongo&#43;testcontainer/</guid>
      <description>Introduction
In this project we shall see how to use testcontainer to test the repository created in mongodb As per their document Testcontainers is a Java library that supports JUnit tests, providing lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container.
Prerequisit
 Docker  Create sample project
Go to the spring initializer and create project with language as kotlin and dependencies required are webflux &amp;amp; reactive mongo db</description>
    </item>
    
    <item>
      <title>Scala Mongo example with akka-http and akka-stream</title>
      <link>https://vikasontech.github.io/post/scala-mongo-example-with-akka-http-and-akka-stream/</link>
      <pubDate>Mon, 23 Dec 2019 16:22:54 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/scala-mongo-example-with-akka-http-and-akka-stream/</guid>
      <description>Introduction
In this tutorial we shall create and CRUD web application in Scala. We will use MongoDB Scala Driver to communicate to the mongo database. It is officially supported Scala driver for MongoDB. Along with that we shall create a Rest API using akka-http module and akka-streams.
Prerequisites
 Scala version: 2.13.1 Database: Mongo:3.4.23-xenial  Other dependencies
 About the service/project
Application should be able to do CRUD operations on the in mongodb document.</description>
    </item>
    
  </channel>
</rss>