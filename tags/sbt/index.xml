<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sbt on Vikas Blogs</title>
    <link>https://vikasontech.github.io/tags/sbt/</link>
    <description>Recent content in sbt on Vikas Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 23 Dec 2019 16:22:54 +0700</lastBuildDate>
    
	<atom:link href="https://vikasontech.github.io/tags/sbt/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala Mongo example with akka-http and akka-stream</title>
      <link>https://vikasontech.github.io/posts/scala-mongo-example-with-akka-http-and-akka-stream/</link>
      <pubDate>Mon, 23 Dec 2019 16:22:54 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/posts/scala-mongo-example-with-akka-http-and-akka-stream/</guid>
      <description>Introduction
In this tutorial we shall create and CRUD web application in Scala. We will use MongoDB Scala Driver to communicate to the mongo database. It is officially supported Scala driver for MongoDB. Along with that we shall create a Rest API using akka-http module and akka-streams.
Prerequisites
 Scala version: 2.13.1 Database: Mongo:3.4.23-xenial  Other dependencies
 About the service/project
Application should be able to do CRUD operations on the in mongodb document.</description>
    </item>
    
    <item>
      <title>Scala Rest API with akka-http</title>
      <link>https://vikasontech.github.io/posts/scala-rest-api-with-akka-http/</link>
      <pubDate>Tue, 10 Dec 2019 08:56:15 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/posts/scala-rest-api-with-akka-http/</guid>
      <description>Introduction
In this tutorial we shall explore how we can use akka-http to create service with scala. Here we create CRUD service with akka actor and try to see how it work.
Versions
 Scala version: 2.13.1 SBT version: 1.3.4  Other dependencies
 About the service/project
Weâ€™ll create two actors that communicate with each other to get the user data and user activity data.
Data Classes
We need two data classes that keeps the user data and user activity data.</description>
    </item>
    
  </channel>
</rss>