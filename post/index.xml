<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Vikas Blogs</title>
    <link>https://vikasontech.github.io/post/</link>
    <description>Recent content in Posts on Vikas Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 28 Jun 2020 00:55:12 +0700</lastBuildDate>
    
	<atom:link href="https://vikasontech.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ratelimiter With Resilience4j Spring Boot2</title>
      <link>https://vikasontech.github.io/post/ratelimiter-with-resilience4j-spring-boot2/</link>
      <pubDate>Sun, 28 Jun 2020 00:55:12 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/ratelimiter-with-resilience4j-spring-boot2/</guid>
      <description>Introduction
Rate limiting is technique to help to limit the number of requests or type of request received by by a server. It help to scale and increase the reliability of the system. As per resilience4j doc
 Rate limiting is an imperative technique to prepare your API for scale and establish high availability and reliability of your service. But also, this technique comes with a whole bunch of different options of how to handle a detected limits surplus, or what type of requests you want to limit.</description>
    </item>
    
    <item>
      <title>Spring Reactive Transaction With Mongo</title>
      <link>https://vikasontech.github.io/post/spring-reactive-transaction-with-mongo/</link>
      <pubDate>Fri, 08 May 2020 21:09:20 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/spring-reactive-transaction-with-mongo/</guid>
      <description>Introduction
In this blog post we will use ReactiveMongoTransactionManager class to manage the transaction. Along with that we shall use the mongo db.
Version
 Kotlin: 1.3.71 Spring-boot: 2.2.6.RELEASEA Java: 11 mongo db: 4.2.0-rc2-bionic  Dependencies
You can use Spring Initializer to initialize the project you need following dependencies -
 Spring Reactive Web Spring Data Reactive MongoDB  Create docker-compose.yml file
I use docker for running the mongo db the docker compose file looks like this -</description>
    </item>
    
    <item>
      <title>Spring Boot Resilience4j Circuitbreaker Annotation Example</title>
      <link>https://vikasontech.github.io/post/spring-boot-resilience4j-circuitbreaker-annotation-example/</link>
      <pubDate>Sun, 03 May 2020 23:11:17 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/spring-boot-resilience4j-circuitbreaker-annotation-example/</guid>
      <description>Introduction
This is continuation of my previous blog on Resilience4j. In this blog, we shall try to use the annotation and external configuration for the circuit breaker implementation.
So let&amp;rsquo;s start by creating a basic application. Our application would have one controller and one service class.
We already saw how to make the reactive basic application in a previous blog. Now we will continue from that.
 Version Details
 spring-boot:2.</description>
    </item>
    
    <item>
      <title>Spring boot reactive and resilience4j circuit breaker example</title>
      <link>https://vikasontech.github.io/post/spring-boot-resilience4j-circuitbreaker-example/</link>
      <pubDate>Fri, 01 May 2020 14:45:44 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/spring-boot-resilience4j-circuitbreaker-example/</guid>
      <description>Introduction
Resilience4j is a lightweight, easy-to-use fault tolerance library inspired by Netflix Hystrix, but designed for Java 8 and functional programming. Lightweight, because the library only uses Vavr, which does not have any other external library dependencies.
Resilience4j provides higher-order functions (decorators) to enhance any functional interface, lambda expression or method reference with a Circuit Breaker, Rate Limiter, Retry or Bulkhead. You can stack more than one decorator on any functional interface, lambda expression or method reference.</description>
    </item>
    
    <item>
      <title>Spring&#43;kotlin&#43;mongo&#43;testcontainer</title>
      <link>https://vikasontech.github.io/post/spring&#43;kotlin&#43;mongo&#43;testcontainer/</link>
      <pubDate>Sat, 18 Jan 2020 07:15:08 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/spring&#43;kotlin&#43;mongo&#43;testcontainer/</guid>
      <description>Introduction
In this project we shall see how to use testcontainer to test the repository created in mongodb As per their document Testcontainers is a Java library that supports JUnit tests, providing lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container.
Prerequisit
 Docker  Create sample project
Go to the spring initializer and create project with language as kotlin and dependencies required are webflux &amp;amp; reactive mongo db</description>
    </item>
    
    <item>
      <title>Add swagger to the kotlin spring </title>
      <link>https://vikasontech.github.io/post/add-swagger-to-the-kotlin-spring-boot-project/</link>
      <pubDate>Thu, 16 Jan 2020 23:05:40 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/add-swagger-to-the-kotlin-spring-boot-project/</guid>
      <description>Introduction
In this short article we shall see how to configure swagger with spring webflux project. We create a project on spring initializer and then shall configure swagger.
Dependencies
Create a project on the spring boot initializer page with dependency as &amp;lsquo;webflux&amp;rsquo; and language as &amp;lsquo;java&amp;rsquo;
In order to work swagger with kotlin you need to add the following repositories in you pom.xml file.
 Since the swagger dependencyis available in another repository you need to add that repository as well in you &amp;lsquo;pom.</description>
    </item>
    
    <item>
      <title>Scala Mongo example with akka-http and akka-stream</title>
      <link>https://vikasontech.github.io/post/scala-mongo-example-with-akka-http-and-akka-stream/</link>
      <pubDate>Mon, 23 Dec 2019 16:22:54 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/scala-mongo-example-with-akka-http-and-akka-stream/</guid>
      <description>Introduction
In this tutorial we shall create and CRUD web application in Scala. We will use MongoDB Scala Driver to communicate to the mongo database. It is officially supported Scala driver for MongoDB. Along with that we shall create a Rest API using akka-http module and akka-streams.
Prerequisites
 Scala version: 2.13.1 Database: Mongo:3.4.23-xenial  Other dependencies
 About the service/project
Application should be able to do CRUD operations on the in mongodb document.</description>
    </item>
    
    <item>
      <title>Scala Rest API with akka-http</title>
      <link>https://vikasontech.github.io/post/scala-rest-api-with-akka-http/</link>
      <pubDate>Tue, 10 Dec 2019 08:56:15 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/scala-rest-api-with-akka-http/</guid>
      <description>Introduction
In this tutorial we shall explore how we can use akka-http to create service with scala. Here we create CRUD service with akka actor and try to see how it work.
Versions
 Scala version: 2.13.1 SBT version: 1.3.4  Other dependencies
 About the service/project
Weâ€™ll create two actors that communicate with each other to get the user data and user activity data.
Data Classes
We need two data classes that keeps the user data and user activity data.</description>
    </item>
    
    <item>
      <title>Secure spring boot application with keycloak</title>
      <link>https://vikasontech.github.io/post/secure-spring-boot-application-with-keycloak/</link>
      <pubDate>Fri, 30 Nov 2018 12:32:26 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/secure-spring-boot-application-with-keycloak/</guid>
      <description>This is the last blog of the series of securing spring boot application with keycloak. It is recommended to go through this first blog and second blog here.
In last blog post of this series we saw how we can configure keycloak for our application. Now in this tutorial we will see how we can use keycloak with spring boot.
Prerequisite
 Docker Keycloak  Version
 Spring Boo: 1.5.17.RELEASE Java: 1.</description>
    </item>
    
    <item>
      <title>Setup keycloak sercurity for spring boot application</title>
      <link>https://vikasontech.github.io/post/setup-keycloak-sercurity-for-spring-boot-application/</link>
      <pubDate>Fri, 30 Nov 2018 11:55:00 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/setup-keycloak-sercurity-for-spring-boot-application/</guid>
      <description>Setup Realm and clients in keycloak
This blog is the second part of the series of security spring boot application with keycloak. In first part we install setup in keycloak with docker you can see first part here
Version:
 Keycloak: 4.5.0.Final Pre-requisites Keycloak should be installed in the  Create realm A realm secures and manages security metadata for a set of users, applications, and registered oauth clients. Users can be created within a specific realm within the Administration console.</description>
    </item>
    
    <item>
      <title>Setup Keycloak with Docker</title>
      <link>https://vikasontech.github.io/post/setup-keycloak-with-docker/</link>
      <pubDate>Sun, 18 Nov 2018 11:49:10 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/setup-keycloak-with-docker/</guid>
      <description>Introduction of Keycloak
Open Source Identity and Access Management For Modern Applications and Services. It add authentication to applications and secure services with minimum fuss. No need to deal with storing users or authenticating users. It&amp;rsquo;s all available out of the box.
You&amp;rsquo;ll even get advanced features such as User Federation, Identity Brokering and Social Login.
Prerequisites:
 Docker:  Since we are using Docker to install Keycloak; it should be installed on your machine.</description>
    </item>
    
    <item>
      <title>Spring Security With JWT and Oauth2 With Spring Boot</title>
      <link>https://vikasontech.github.io/post/spring-security-with-jwt-and-oauth2-with-spring-boot/</link>
      <pubDate>Fri, 23 Feb 2018 16:23:39 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/spring-security-with-jwt-and-oauth2-with-spring-boot/</guid>
      <description>Introduction
In this article we shall see example of how to secure a spring boot rest application with Spring Boot2, Spring Security, Oauth2, and JWT token.
1. Source Code Repository
The code used in this article is available in this repository GitHub.
2. Dependencies
 2.1. Versions
 Spring Boot: 2.1.3.RELEASE Java: 1.8  3. Entity Class
We create two Entity Classes, one is User and another is Role. User entity class contains user details like name, password, roles details, and role entity contains the role details.</description>
    </item>
    
    <item>
      <title>JPA EntityListner example with Spring Boot 1.5.1</title>
      <link>https://vikasontech.github.io/post/jpa-entitylistner-example-with-spring/</link>
      <pubDate>Tue, 25 Apr 2017 18:46:45 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/jpa-entitylistner-example-with-spring/</guid>
      <description>Introduction
To audit any transaction table you can use EntityListener Annotation of the JPA. JPA provide the EntityListener annotations that attach a listener class with the entity that you want to audit.
What is audit table ?
Audit Tables are used to track transactions against a particular table or tables. They allow you to see an ongoing &amp;ldquo;log&amp;rdquo; for future use.
There may be users and/or applications that have access to insert, update, and delete out of that table.</description>
    </item>
    
    <item>
      <title>Spring Boot Scheduling With Annotation</title>
      <link>https://vikasontech.github.io/post/spring-boot-scheduling-with-annotation/</link>
      <pubDate>Wed, 19 Apr 2017 19:40:17 +0700</pubDate>
      
      <guid>https://vikasontech.github.io/post/spring-boot-scheduling-with-annotation/</guid>
      <description>Introduction
Spring Boot provides annotation support for task scheduling. It is easy way to develop and run a Task scheduler without using any xml and bean configurations Simply add the annotation @Scheduled on the task scheduler method with required interval time. In this example, we will see how to use Spring @Scheduledannotation to schedule a task.
Enable scheduling annotations
To enable support for @Scheduled annotation add @EnableScheduling to one of your @Configuration classes:</description>
    </item>
    
  </channel>
</rss>